(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{251:function(r,v,_){"use strict";_.r(v);var a=_(0),n=Object(a.a)({},function(){var r=this,v=r.$createElement,_=r._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[_("h1",{attrs:{id:"概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概念","aria-hidden":"true"}},[r._v("#")]),r._v(" 概念")]),r._v(" "),_("h2",{attrs:{id:"rsa加密"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rsa加密","aria-hidden":"true"}},[r._v("#")]),r._v(" RSA加密")]),r._v(" "),_("h3",{attrs:{id:"用法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用法","aria-hidden":"true"}},[r._v("#")]),r._v(" 用法")]),r._v(" "),_("p",[r._v("密钥a：e（指数），n（模）\n密钥b：d（指数），n（模）")]),r._v(" "),_("p",[r._v("用密钥a把M加密为C：C = M ** e (mod n)\n用密钥b把C还原为M：M = C ** d (mod n)")]),r._v(" "),_("p",[r._v("也可以反过来用密钥b加密，密钥a还原，从数学上密钥a、b完全可以交换使用。但在实际运用中，一般会生成一个指数较小的（或者固定的）数作为公钥开放（客户端使用起来更方便），指数较大的数作为私钥。如果将它们交换，相当于用一个指数较小的数作为私钥，较容易被反推出来，不安全。")]),r._v(" "),_("h3",{attrs:{id:"密钥对生成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#密钥对生成","aria-hidden":"true"}},[r._v("#")]),r._v(" 密钥对生成")]),r._v(" "),_("p",[r._v("生成e，d，n过程：")]),r._v(" "),_("p",[r._v("1、选取两个足够大的素数：p、q")]),r._v(" "),_("p",[r._v("2、n = p * q")]),r._v(" "),_("p",[r._v("3、m = (p - 1) * (q - 1)")]),r._v(" "),_("p",[r._v("4、找一个与m互质的数e，且1 < e < m")]),r._v(" "),_("p",[r._v("5、找出d，使得d * e (mod m) = 1")]),r._v(" "),_("p",[r._v("6、生成完毕，密钥a：(e, n)，密钥b：(d, n)")]),r._v(" "),_("h3",{attrs:{id:"安全性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安全性","aria-hidden":"true"}},[r._v("#")]),r._v(" 安全性")]),r._v(" "),_("p",[r._v("安全性是基于：大素数分解困难。在这个条件成立的前提下，通过已知的大素数n难以反推出p、q，所以也难以推出e、d，因此密钥a、b虽然可以相互加密解密，但算出另一密钥是困难的。")]),r._v(" "),_("h3",{attrs:{id:"例子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#例子","aria-hidden":"true"}},[r._v("#")]),r._v(" 例子")]),r._v(" "),_("p",[r._v("生成密钥对")]),r._v(" "),_("p",[r._v("1、选取两个素数 p = 3 ，q = 11（为方便举例选取了较小的素数）")]),r._v(" "),_("p",[r._v("2、n = p * q = 3 * 11 = 33")]),r._v(" "),_("p",[r._v("3、m = (p - 1) * (q - 1) = (3 - 1) * (11 - 1) = 20")]),r._v(" "),_("p",[r._v("4、从比m小的数中找出一个与m互质的数 e = 3")]),r._v(" "),_("p",[r._v("5、可以通过穷举法，d从1开始递增，试出满足条件的最小的d = 7")]),r._v(" "),_("p",[r._v("6、得出一对密钥：密钥a：(3, 33)，密钥b：(7, 33)")]),r._v(" "),_("p",[r._v("对'rsa'这个字符串加密")]),r._v(" "),_("p",[r._v("1、对‘rsa’进行数字化转化，'r'，‘s'，’a'可以转化成其对应字母表次序：18、19、1")]),r._v(" "),_("p",[r._v("2、用密钥a加密：")]),r._v(" "),_("p",[r._v("r => 18 => 18 ** 3 % 33 => 24")]),r._v(" "),_("p",[r._v("s => 19 => 19 ** 3 % 33 => 28")]),r._v(" "),_("p",[r._v("a => 1 => 1 ** 3 % 33 => 1")]),r._v(" "),_("p",[r._v("加密后：['r', 's', 'a'] => [24, 28, 1]")]),r._v(" "),_("p",[r._v("对加密后的[24, 28, 1]进行还原")]),r._v(" "),_("p",[r._v("1、用密钥b解密")]),r._v(" "),_("p",[r._v("24 => 24 ** 7 % 33 => 18 => r")]),r._v(" "),_("p",[r._v("28 => 28 ** 7 % 33 => 19 => s")]),r._v(" "),_("p",[r._v("1 => 1 ** 7 % 33 => 1 => a")]),r._v(" "),_("p",[r._v("得出结果'rsa'")]),r._v(" "),_("h2",{attrs:{id:"二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树","aria-hidden":"true"}},[r._v("#")]),r._v(" 二叉树")]),r._v(" "),_("h3",{attrs:{id:"遍历"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#遍历","aria-hidden":"true"}},[r._v("#")]),r._v(" 遍历")]),r._v(" "),_("p",[r._v("例子：")]),r._v(" "),_("pre",[_("code",[r._v("          1\n         / \\\n       2     3\n      / \\     \\\n     4   5     6\n        / \\\n       7   8\n")])]),r._v(" "),_("ul",[_("li",[r._v("深度优先遍历:")])]),r._v(" "),_("p",[r._v("前序(根->左->右): 1 2 4 5 7 8 3 6")]),r._v(" "),_("p",[r._v("中序(左->根->右): 4 2 7 5 8 1 3 6")]),r._v(" "),_("p",[r._v("后序(左->右->根): 4 7 8 5 2 6 3 1")]),r._v(" "),_("ul",[_("li",[r._v("广度优先遍历:")])]),r._v(" "),_("p",[r._v("1 -> 2 3 -> 4 5 6 -> 7 8")]),r._v(" "),_("h3",{attrs:{id:"二叉搜索树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树","aria-hidden":"true"}},[r._v("#")]),r._v(" 二叉搜索树")]),r._v(" "),_("p",[r._v("定义：")]),r._v(" "),_("ul",[_("li",[r._v("若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；")]),r._v(" "),_("li",[r._v("若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；")]),r._v(" "),_("li",[r._v("任意节点的左、右子树也分别为二叉查找树；")]),r._v(" "),_("li",[r._v("没有键值相等的节点。")])]),r._v(" "),_("p",[r._v("例子：")]),r._v(" "),_("pre",[_("code",[r._v("          6\n         / \\\n       2     8\n      / \\     \\\n     1   4     9\n        / \\\n       3   5\n")])]),r._v(" "),_("p",[r._v("查找效率：")]),r._v(" "),_("p",[r._v("平均为O(log"),_("sub",[r._v("2")]),_("sup",[r._v("n")]),r._v(")，最差为O(n)（比如全部节点只有右子树，层数为n）")]),r._v(" "),_("h3",{attrs:{id:"平衡二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树","aria-hidden":"true"}},[r._v("#")]),r._v(" 平衡二叉树")]),r._v(" "),_("h3",{attrs:{id:"红黑树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#红黑树","aria-hidden":"true"}},[r._v("#")]),r._v(" 红黑树")]),r._v(" "),_("p",[r._v("定义：")]),r._v(" "),_("ul",[_("li",[r._v("节点是红色或黑色。")]),r._v(" "),_("li",[r._v("根是黑色。")]),r._v(" "),_("li",[r._v("所有叶子都是黑色（叶子是NIL节点）。")]),r._v(" "),_("li",[r._v("每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）")]),r._v(" "),_("li",[r._v("从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。")])]),r._v(" "),_("p",[r._v("这些约束可以确保：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。即查找效率最差也是O(log"),_("sub",[r._v("2")]),_("sup",[r._v("n")]),r._v(")。")]),r._v(" "),_("p",[r._v("例子：")]),r._v(" "),_("pre",[_("code",[r._v("           b13\n         /     \\\n      r8        r17\n     /  \\       /  \\\n    b1  b11   b15  b25\n     \\             /  \\\n      r6         r22  r27\n")])]),r._v(" "),_("p",[r._v("方法：")]),r._v(" "),_("p",[r._v("变色、左旋、右旋")]),r._v(" "),_("p",[r._v("操作：")]),r._v(" "),_("p",[r._v("插入、删除、查找")]),r._v(" "),_("h2",{attrs:{id:"huffman压缩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#huffman压缩","aria-hidden":"true"}},[r._v("#")]),r._v(" Huffman压缩")]),r._v(" "),_("p",[r._v("原理：根据文件中各字符的出现频率对字符重新编码，越高频的字符给予越短的编码，来降低文件整体数据量。")]),r._v(" "),_("ol",[_("li",[r._v("读取文件，得到各字符频率表。")]),r._v(" "),_("li",[r._v("根据频率表，构建Huffman树（从数组每次取最小的两个值；两个值分别作为左右节点，两值之和作为父节点建立一个子树；并将父节点放入数组，重复取值操作，直到数组内的项全部转化成树。最后构建出来的树满足值越小离根节点越远）。")]),r._v(" "),_("li",[r._v("根据Huffman树，建立字符与编码的映射表，越靠近根节点的字符对应的编码越短。")]),r._v(" "),_("li",[r._v("根据映射表，对原文件重新编译，得到编译后的文件。")]),r._v(" "),_("li",[r._v("把编译后的文件和配置信息（包括Huffman树）打包成为最后的输出文件，完成压缩。")]),r._v(" "),_("li",[r._v("解压时，根据配置信息对编译后的文件进行还原，得到原文件。")])]),r._v(" "),_("h2",{attrs:{id:"经典排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#经典排序","aria-hidden":"true"}},[r._v("#")]),r._v(" 经典排序")]),r._v(" "),_("h3",{attrs:{id:"快速排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快速排序","aria-hidden":"true"}},[r._v("#")]),r._v(" 快速排序")]),r._v(" "),_("p",[r._v("普通快排 时间复杂度O(n*log"),_("sup",[r._v("n")]),r._v(")，空间复杂度O(log"),_("sup",[r._v("n")]),r._v(")")]),r._v(" "),_("pre",[_("code",[r._v("const arr = [5,11,23,43,72,8,34,99,4,65,54];\n\nfunction quickSort(arr) {\n  arr = arr.slice();\n  function sort(arr) {\n    if (arr.length <= 1) return arr;\n    const mid = arr.shift();\n    const left = [];\n    const right = [];\n    arr.forEach(num => {\n      if (num < mid) {\n        left.push(num);\n      } else {\n        right.push(num);\n      }\n    });\n    return [...sort(left), mid, ...sort(right)];\n  }\n  return sort(arr);\n}\n\nquickSort(arr);\n")])]),r._v(" "),_("p",[r._v("原地快排 时间复杂度O(n*log"),_("sup",[r._v("n")]),r._v(")，空间复杂度O(1)")]),r._v(" "),_("pre",[_("code",[r._v("function betterQuickSort(arr, begin = 0, end = arr.length - 1) {\n  if (end - begin <= 1) return;\n  const benchmark = arr[begin];\n  let i = begin + 1;\n  let j = end;\n  // 每轮循环都把一个基准数和其左右数组摆对，再对左右数组递归\n  while (i < j) {\n    while (arr[i] < benchmark) {\n      i++;\n    }\n    while (arr[j] > benchmark) {\n      j--;\n    }\n    if (i < j) {\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n  }\n  if (arr[i] > benchmark) {\n    i = i - 1;\n  }\n  [arr[begin], arr[i]] = [arr[i], arr[begin]];\n  betterQuickSort(arr, begin, i - 1);\n  betterQuickSort(arr, i + 1, end);\n}\n\nbetterQuickSort(arr);\n")])])])},[],!1,null,null,null);v.default=n.exports}}]);