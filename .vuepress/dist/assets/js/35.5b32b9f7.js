(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{232:function(e,a,t){"use strict";t.r(a);var n=t(0),s=Object(n.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库","aria-hidden":"true"}},[e._v("#")]),e._v(" 数据库")]),e._v(" "),t("h2",{attrs:{id:"mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql","aria-hidden":"true"}},[e._v("#")]),e._v(" MySQL")]),e._v(" "),t("p",[e._v("关系型")]),e._v(" "),t("h3",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法","aria-hidden":"true"}},[e._v("#")]),e._v(" 语法")]),e._v(" "),t("p",[e._v("db、表、行列")]),e._v(" "),t("h2",{attrs:{id:"redis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis","aria-hidden":"true"}},[e._v("#")]),e._v(" Redis")]),e._v(" "),t("p",[e._v("非关系型/键值型/内存型")]),e._v(" "),t("p",[e._v("持久化方法：RDB定时快照、AOF增量记录操作以还原")]),e._v(" "),t("h3",{attrs:{id:"语法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 语法")]),e._v(" "),t("p",[e._v("连接db，直接对键值操作。值的数据类型分为string、hash、list、set、sorted set五种数据，对应不同的操作方式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// string\n\nSET key val // 写\n\nGET key // 读\n\nDEL key // 删\n\nEXISTS key // 查找是否存在\n\nEXPIRE key seconds // 给该键设置有效期，过期自动清除\n\nTTL key // 查询该键的剩余有效期\n\n// hash\n\nHSET key field1 val1 field2 val2 // 批量设置哈希表\n\nHGET key field1 // 从哈希表获取某个键的值\n\nHGETALL key // 获取该哈希表的全部键和值\n\n// list\n\nLPUSH key val1 val2 // 向列表头部添加多个成员（RPUSH为尾部）\n\nLPOP key // 移出并返回列表头部元素（RPOP为尾部）\n\nLRANGE key start stop // 获取列表下标从start至stop的一段列表\n\n// set\n\nSADD key val1 val2 // 向集合添加多个成员，自动去重\n\nSPOP key // 移除并返回集合中的一个随机成员\n\nSMEMBERS key // 返回集合中的所有成员\n\n// sorted set\n\nZADD key score1 member1 score2 member2 // 向有序集合添加多个成员，若成员已存在，则更新分值\n\nZRANK key member1 // 返回有序集合中指定成员的索引\n\nZSCORE key member1 // 返回有序集合中指定成员的分值\n\nZCOUNT key min max // 返回在有序集合中指定分值区间的成员数\n\nZRANGEBYSCORE key min max  // 返回在有序集合中指定分值区间的成员\n\nZRANGE key start stop // 返回在有序集合中指定索引区间的成员\n")])])]),t("h3",{attrs:{id:"发布-订阅"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发布-订阅","aria-hidden":"true"}},[e._v("#")]),e._v(" 发布/订阅")]),e._v(" "),t("h2",{attrs:{id:"mongodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mongodb","aria-hidden":"true"}},[e._v("#")]),e._v(" MongoDB")]),e._v(" "),t("p",[e._v("非关系型/文档型/内存型")]),e._v(" "),t("p",[e._v("持久化方法：数据库操作按一定频率批量从内存同步到硬盘")]),e._v(" "),t("h3",{attrs:{id:"语法-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法-3","aria-hidden":"true"}},[e._v("#")]),e._v(" 语法")]),e._v(" "),t("p",[e._v("选取db -> 选取集合 -> 对集合增删改查")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("show dbs // 显示所有db\n\nuse db1 // 使用名为db1的数据库（db）\n\ndb.createCollection(name, options) // 在db里创建一个集合（col）\n\nshow collections // 显示所有col\n\ndb.col1.insert(data) // 在名为col1的集合中插入一条json格式的data数据（db.col1表示在col1中进行）\n\ndb.col1.update(query, update, options) // 将满足query条件的data以update规则更新\n\ndb.col1.remove(query, options) // 删除满足query条件的data\n\ndb.col1.find(query, projection) // 查找满足query条件的data\n\ndb.col1.find().sort(rule).skip(skipNum).limit(limitNum) // 带排序、跳过、数量的查找\n\ndb.col1.aggregate(options) // 聚合查找，类似MySQL的GROUP BY\n\ndb.col1.createIndex(keys, options) // 以keys创建索引，提高后续查找效率\n")])])])])},[],!1,null,null,null);a.default=s.exports}}]);